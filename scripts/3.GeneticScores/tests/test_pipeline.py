#!/usr/bin/env python3
"""
Script de prueba simple para el pipeline unificado.
Prueba b√°sica de funcionamiento de los m√≥dulos principales.
"""
import sys
import os
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# A√±adir el directorio utils al path
script_dir = Path(__file__).parent
utils_dir = script_dir.parent / "utils"
sys.path.insert(0, str(utils_dir))

logger.info(f"Buscando m√≥dulos en: {utils_dir}")

try:
    from data_loader import DataLoader
    from clinical_processor import ClinicalProcessor
    from data_generators import DataGenerators
    logger.info("‚úì M√≥dulos importados correctamente")
except ImportError as e:
    logger.error(f"‚úó Error importando m√≥dulos: {e}")
    sys.exit(1)

def test_basic_functionality():
    """Test b√°sico de funcionalidad."""
    logger.info("Iniciando test b√°sico...")
    
    # Configuraci√≥n de prueba m√≠nima simplificada
    test_config = {
        'data_paths': {
            'base_path': '/tmp',
            'clinical_mutations_file': 'test.tsv',
            'mutations_vaf_file': None,
            'gene_embeddings_file': None
        },
        'variable_processing': {
            'continuous_variables': ['Age', 'HB'],
            'categorical_variables': ['Sex'],
            'binary_variables': ['Complex_Karyotype'],
            'survival_variables': {
                'time_variable': 'OS',
                'status_variable': 'OS_STATUS'
            },
            'gene_selection': {
                'selected_genes': ['TP53', 'ASXL1'],
                'auto_selection_criteria': {
                    'min_mutation_frequency': 0.05,
                    'max_genes': 10
                }
            }
        },
        'data_generation': {
            'output_formats': ['table'],
            'table_format': {
                'include_all_clinical': True,
                'output_filename': 'test_table'
            },
            'graph_format': {
                'graph_type': 'patient_gene',
                'patient_node_features': 'clinical_only',
                'gene_node_features': {
                    'embedding_source': 'scgpt',
                    'embedding_dimension': 512
                },
                'edge_criteria': {
                    'use_vaf_filter': False,
                    'min_vaf_threshold': 0.05
                },
                'output_filename': 'test_graph'
            }
        },
        'cross_validation': {
            'n_folds': 5,
            'fold_column': 'fold'
        },
        'output': {
            'file_formats': {
                'tables': 'pickle',
                'graphs': 'pickle',
                'metadata': 'json'
            },
            'compression': None,
            'validate_output': True,
            'save_config_copy': True
        }
    }
    
    try:
        # Probar inicializaci√≥n de m√≥dulos
        logger.info("Probando inicializaci√≥n de DataLoader...")
        data_loader = DataLoader(test_config)
        logger.info("‚úì DataLoader inicializado")
        
        logger.info("Probando inicializaci√≥n de ClinicalProcessor...")
        clinical_processor = ClinicalProcessor(test_config)
        logger.info("‚úì ClinicalProcessor inicializado")
        
        logger.info("Probando inicializaci√≥n de DataGenerators...")
        data_generators = DataGenerators(test_config)
        logger.info("‚úì DataGenerators inicializado")
        
        # Probar que los m√≥dulos tienen los m√©todos esperados
        logger.info("Verificando m√©todos disponibles...")
        
        # DataLoader
        assert hasattr(data_loader, 'load_clinical_data'), "DataLoader missing load_clinical_data"
        assert hasattr(data_loader, 'load_mutation_vaf_data'), "DataLoader missing load_mutation_vaf_data"
        assert hasattr(data_loader, 'load_gene_embeddings'), "DataLoader missing load_gene_embeddings"
        logger.info("‚úì DataLoader tiene todos los m√©todos requeridos")
        
        # ClinicalProcessor
        assert hasattr(clinical_processor, 'prepare_clinical_features'), "ClinicalProcessor missing prepare_clinical_features"
        assert hasattr(clinical_processor, 'extract_survival_data'), "ClinicalProcessor missing extract_survival_data"
        assert hasattr(clinical_processor, 'extract_cv_folds'), "ClinicalProcessor missing extract_cv_folds"
        assert hasattr(clinical_processor, 'get_feature_matrix'), "ClinicalProcessor missing get_feature_matrix"
        logger.info("‚úì ClinicalProcessor tiene todos los m√©todos requeridos")
        
        # DataGenerators
        assert hasattr(data_generators, 'generate_table_data'), "DataGenerators missing generate_table_data"
        assert hasattr(data_generators, 'generate_graph_data'), "DataGenerators missing generate_graph_data"
        logger.info("‚úì DataGenerators tiene todos los m√©todos requeridos")
        
        logger.info("üéâ Test b√°sico completado exitosamente")
        logger.info("Todos los m√≥dulos est√°n correctamente inicializados y tienen los m√©todos esperados")
        return True
        
    except Exception as e:
        logger.error(f"‚úó Error en test b√°sico: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    logger.info("="*50)
    logger.info("TEST B√ÅSICO DEL PIPELINE UNIFICADO")
    logger.info("="*50)
    
    success = test_basic_functionality()
    
    if success:
        logger.info("\n‚úÖ Test b√°sico EXITOSO - El pipeline est√° listo para usar")
    else:
        logger.error("\n‚ùå Test b√°sico FALL√ì - Revisar errores arriba")
    
    sys.exit(0 if success else 1)
